package router

import (
	"github.com/gofiber/fiber/v2"
	swagger "github.com/gofiber/swagger" // Cambiado a la librería oficial de Fiber
	"github.com/riada2/config"
	_ "github.com/riada2/docs" // docs is generated by Swag CLI
	"github.com/riada2/internal/core/domain"
	"github.com/riada2/internal/handlers"
	"github.com/riada2/internal/middleware"
)

// SetupRoutes define todas las rutas de la aplicación.
func SetupRoutes(app *fiber.App, authHandler *handlers.AuthHandler, userHandler *handlers.UserHandler, personHandler *handlers.PersonHandler, addressHandler *handlers.AddressHandler, phoneHandler *handlers.PhoneHandler, membershipHandler *handlers.MembershipHandler, cfg *config.Config) {
	// Ruta para la documentación de Swagger
	app.Get("/swagger/*", swagger.New())

	// Ruta de bienvenida
	app.Get("/", handlers.Welcome)

	// Rutas públicas
	api := app.Group("/api")
	v1 := api.Group("/v1")
	v1.Post("/login", authHandler.Login)

	// Rutas protegidas
	protected := v1.Group("/protected")
	protected.Use(middleware.AuthRequired(cfg.JWTSecret))

	// Ruta para cualquier usuario autenticado
	protected.Get("/profile", userHandler.GetProfile)

	// Ruta solo para administradores
	adminOnly := protected.Group("/admin")
	adminOnly.Use(middleware.RoleRequired(domain.AdminRole))
	adminOnly.Get("/", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{"message": "Welcome Admin!"})
	})
	adminOnly.Post("/register", userHandler.Register)
	adminOnly.Get("/users", userHandler.GetAllUsers)

	// --- Rutas para Person (unificadas) ---
	personRoutes := protected.Group("/person")

	// PUT /person: Un usuario autenticado crea o actualiza su propia información personal.
	personRoutes.Put("/", personHandler.CreateOrUpdatePersonForUser)

	// GET /person/search: Búsqueda de personas (accesible para cualquier usuario autenticado).
	personRoutes.Get("/search", personHandler.SearchPersons)

	// POST /person: Un administrador crea un nuevo registro de persona.
	personRoutes.Post("/", middleware.RoleRequired(domain.AdminRole), personHandler.CreatePersonByAdmin)

	// DELETE /person/:id: Un administrador elimina un registro de persona.
	personRoutes.Delete("/:id", middleware.RoleRequired(domain.AdminRole), personHandler.DeletePerson)

	// --- Rutas para Address ---
	addressRoutes := protected.Group("/address")
	addressRoutes.Post("/", addressHandler.CreateOrUpdateAddress) // Crear
	addressRoutes.Put("/", addressHandler.CreateOrUpdateAddress)  // Actualizar (usando el mismo handler)
	addressRoutes.Delete("/:id", addressHandler.DeleteAddress)    // Eliminar

	// --- Rutas para Phone ---
	phoneRoutes := protected.Group("/phone")
	phoneRoutes.Post("/", phoneHandler.CreateOrUpdatePhone)
	phoneRoutes.Put("/", phoneHandler.CreateOrUpdatePhone)
	phoneRoutes.Delete("/:id", phoneHandler.DeletePhone)

	// --- Rutas para Membership ---
	membershipRoutes := protected.Group("/membership")
	membershipRoutes.Post("/", membershipHandler.CreateMembership)                    // Crear membresía
	membershipRoutes.Get("/person/:personID", membershipHandler.GetMembershipByPersonID) // Obtener membresía por persona
}
